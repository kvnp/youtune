diff --git a/node_modules/ytmusic-api/dist/index.d.ts b/node_modules/ytmusic-api/dist/index.d.ts
index 920bb51..7ab3143 100644
--- a/node_modules/ytmusic-api/dist/index.d.ts
+++ b/node_modules/ytmusic-api/dist/index.d.ts
@@ -1821,6 +1821,7 @@ declare class YTMusic {
     private cookiejar;
     private config?;
     private client;
+    public initialData;
     /**
      * Creates an instance of YTMusic
      * Make sure to call initialize()
@@ -1830,6 +1831,7 @@ declare class YTMusic {
      * Initializes the API
      */
     initialize(options?: {
+        baseURL?: string;
         cookies?: string;
         GL?: string;
         HL?: string;
@@ -1956,6 +1958,12 @@ declare class YTMusic {
      * @returns Mixed HomeSection
      */
     getHomeSections(): Promise<HomeSection[]>;
+    /**
+     * Get sections for the home page from initial data.
+     *
+     * @returns Mixed HomeSection
+     */
+    getInitialHomeSections(): HomeSection[];
 }
 
 export { AlbumBasic, AlbumDetailed, AlbumFull, ArtistBasic, ArtistDetailed, ArtistFull, HomeSection, PlaylistDetailed, PlaylistFull, SearchResult, SongDetailed, SongFull, ThumbnailFull, VideoDetailed, VideoFull, YTMusic as default };
diff --git a/node_modules/ytmusic-api/dist/index.js b/node_modules/ytmusic-api/dist/index.js
index aaf716a..83a725e 100644
--- a/node_modules/ytmusic-api/dist/index.js
+++ b/node_modules/ytmusic-api/dist/index.js
@@ -1829,26 +1829,25 @@ var SearchParser = class {
 };
 
 // src/YTMusic.ts
-_axios2.default.defaults.headers.common["Accept-Encoding"] = "gzip";
 var YTMusic = class {
-  
-  
-  
+  constructor() {}
   /**
-   * Creates an instance of YTMusic
-   * Make sure to call initialize()
+   * Initializes the API
    */
-  constructor() {
+  async initialize(options) {
     this.cookiejar = new (0, _toughcookie.CookieJar)();
     this.config = {};
     this.client = _axios2.default.create({
-      baseURL: "https://music.youtube.com/",
-      headers: {
-        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.129 Safari/537.36",
-        "Accept-Language": "en-US,en;q=0.5"
-      },
-      withCredentials: true
+			baseURL: options?.baseURL
+				? options.baseURL
+				: "https://music.youtube.com/",
+      headers: {"Accept-Language": "en-US,en;q=0.5"},
+      withCredentials: true,
+      maxRedirects: 0
     });
+    if (options?.baseURL)
+		  this.client.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
+
     this.client.interceptors.request.use((req) => {
       if (req.baseURL) {
         const cookieString = this.cookiejar.getCookieStringSync(req.baseURL);
@@ -1870,11 +1869,7 @@ var YTMusic = class {
       }
       return res;
     });
-  }
-  /**
-   * Initializes the API
-   */
-  async initialize(options) {
+
     const { cookies, GL, HL } = _nullishCoalesce(options, () => ( {}));
     if (cookies) {
       for (const cookieString of cookies.split("; ")) {
@@ -1883,6 +1878,7 @@ var YTMusic = class {
         this.cookiejar.setCookieSync(cookie, "https://www.youtube.com/");
       }
     }
+    
     const html = (await this.client.get("/")).data;
     const setConfigs = html.match(/ytcfg\.set\(.*\)/) || [];
     const configs = setConfigs.map((c) => c.slice(10, -1)).map((s) => {
@@ -1898,6 +1894,16 @@ var YTMusic = class {
         ...config
       };
     }
+
+    var initialData = [];
+    var initialDataSlice = html.slice(html.indexOf("initialData = [];"));
+    initialDataSlice = initialDataSlice.slice(0, initialDataSlice.indexOf(";ytcfg.set({'YTM"));
+    eval(initialDataSlice);
+    for (const index in initialData) {
+      initialData[index].data = JSON.parse(initialData[index].data);
+    }
+    this.initialData = initialData
+    
     if (!this.config) {
       this.config = {};
     }
@@ -2253,6 +2259,10 @@ var YTMusic = class {
     }
     return sections.map(Parser.parseHomeSection);
   }
+
+  getInitialHomeSections() {
+    return this.initialData[1].data.contents.singleColumnBrowseResultsRenderer.tabs[0].tabRenderer.content.sectionListRenderer.contents.map(Parser.parseHomeSection);
+  }
 };
 
 // src/index.ts
