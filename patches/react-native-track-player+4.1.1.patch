diff --git a/node_modules/react-native-track-player/lib/src/constants/Event.js b/node_modules/react-native-track-player/lib/src/constants/Event.js
index 9a5676d..c56b437 100644
--- a/node_modules/react-native-track-player/lib/src/constants/Event.js
+++ b/node_modules/react-native-track-player/lib/src/constants/Event.js
@@ -1,5 +1,4 @@
-export var Event;
-(function (Event) {
+export const Event = (function (Event) {
     Event["PlayerError"] = "player-error";
     /** Fired when the state of the player changes. */
     Event["PlaybackState"] = "playback-state";
@@ -131,4 +130,6 @@ export var Event;
      * See https://rntp.dev/docs/api/events#commonmetadatareceived
      **/
     Event["MetadataCommonReceived"] = "metadata-common-received";
-})(Event || (Event = {}));
+    
+    return Event;
+})({});
\ No newline at end of file
diff --git a/node_modules/react-native-track-player/lib/web/TrackPlayer/Player.js b/node_modules/react-native-track-player/lib/web/TrackPlayer/Player.js
index 76a5241..5b41187 100644
--- a/node_modules/react-native-track-player/lib/web/TrackPlayer/Player.js
+++ b/node_modules/react-native-track-player/lib/web/TrackPlayer/Player.js
@@ -1,5 +1,7 @@
 import { State } from '../../src/constants/State';
 import { SetupNotCalledError } from './SetupNotCalledError';
+import shaka from 'shaka-player/dist/shaka-player.ui';
+
 export class Player {
     hasInitialized = false;
     element;
@@ -28,6 +30,7 @@ export class Player {
     set playWhenReady(pwr) {
         this._playWhenReady = pwr;
     }
+
     async setupPlayer() {
         // shaka only runs in a browser
         if (typeof window === 'undefined')
@@ -36,8 +39,8 @@ export class Player {
             // TODO: double check the structure of this error message
             throw { code: 'player_already_initialized', message: 'The player is not initialized. Call setupPlayer first.' };
         }
-        // @ts-ignore
-        const shaka = await import('shaka-player/dist/shaka-player.ui');
+        
+        //const shaka = await import('shaka-player/dist/shaka-player.ui');
         // Install built-in polyfills to patch browser incompatibilities.
         shaka.polyfill.installAll();
         // Check to see if the browser supports the basic APIs Shaka needs.
@@ -55,6 +58,8 @@ export class Player {
         // build dom element and attach shaka-player
         this.element = document.createElement('audio');
         this.element.setAttribute('id', 'react-native-track-player');
+        navigator.mediaSession.playbackState = "none";
+        
         this.player = new shaka.Player();
         this.player?.attach(this.element);
         // Listen for relevant events events.
@@ -104,6 +109,14 @@ export class Player {
             throw new SetupNotCalledError();
         await this.player.load(track.url);
         this.current = track;
+        navigator.mediaSession.metadata = new MediaMetadata({
+            title: track.title,
+            artist: track.artist,
+            artwork: [{
+                src: track.artwork,
+                type: 'image/png'
+            }]
+        });
     }
     async retry() {
         if (!this.player)
diff --git a/node_modules/react-native-track-player/lib/web/TrackPlayer/PlaylistPlayer.js b/node_modules/react-native-track-player/lib/web/TrackPlayer/PlaylistPlayer.js
index b36ad21..deeb66c 100644
--- a/node_modules/react-native-track-player/lib/web/TrackPlayer/PlaylistPlayer.js
+++ b/node_modules/react-native-track-player/lib/web/TrackPlayer/PlaylistPlayer.js
@@ -1,6 +1,6 @@
 import { Player } from './Player';
 import { RepeatMode } from './RepeatMode';
-import { State } from '../../src';
+import { State } from '../../src/constants/State';
 export class PlaylistPlayer extends Player {
     // TODO: use immer to make the `playlist` immutable
     playlist = [];
diff --git a/node_modules/react-native-track-player/lib/web/TrackPlayerModule.js b/node_modules/react-native-track-player/lib/web/TrackPlayerModule.js
index 1f10a40..bca268e 100644
--- a/node_modules/react-native-track-player/lib/web/TrackPlayerModule.js
+++ b/node_modules/react-native-track-player/lib/web/TrackPlayerModule.js
@@ -1,7 +1,9 @@
 import { DeviceEventEmitter } from 'react-native';
-import { Event, State } from '../src';
+import { State } from '../src/constants/State';
+import { Event } from '../src/constants/Event';
 import { PlaylistPlayer, RepeatMode } from './TrackPlayer';
 import { SetupNotCalledError } from './TrackPlayer/SetupNotCalledError';
+
 export class TrackPlayerModule extends PlaylistPlayer {
     emitter = DeviceEventEmitter;
     progressUpdateEventInterval;
@@ -50,10 +52,49 @@ export class TrackPlayerModule extends PlaylistPlayer {
     }
     set state(newState) {
         super.state = newState;
+        if (newState.state === State.Playing)
+            navigator.mediaSession.playbackState = "playing";
+        else if (newState.state === State.Buffering)
+            navigator.mediaSession.playbackState = "playing";
+        else if (newState.state === State.Paused)
+            navigator.mediaSession.playbackState = "paused";
+        else if (newState.state === State.Stopped)
+            navigator.mediaSession.playbackState = "none";
+
         this.emitter.emit(Event.PlaybackState, newState);
     }
     async updateOptions(options) {
         this.setupProgressUpdates(options.progressUpdateEventInterval);
+        if (options.capabilities) {
+            let actionHandlers = [];
+            if (options.capabilities.includes(this.CAPABILITY_PLAY))
+                actionHandlers.push(['play', () => this.emitter.emit(Event.RemotePlay)]);
+            
+            if (options.capabilities.includes(this.CAPABILITY_PAUSE))
+                actionHandlers.push(['pause', () => this.emitter.emit(Event.RemotePause)]);
+            
+            if (options.capabilities.includes(this.CAPABILITY_STOP))
+                actionHandlers.push(['stop', () => this.emitter.emit(Event.RemoteStop)]);
+
+            if (options.capabilities.includes(this.CAPABILITY_SEEK_TO)) {
+                actionHandlers.push(['seekbackward', () => this.emitter.emit(Event.RemoteJumpBackward)]);
+                actionHandlers.push(['seekforward', () => this.emitter.emit(Event.RemoteJumpForward)]);
+                actionHandlers.push(['seekto', e => this.emitter.emit(
+                        Event.RemoteSeek, {position: e.seekTime}
+                )]);
+            }
+
+            if (options.capabilities.includes(this.CAPABILITY_SKIP_TO_PREVIOUS))
+                actionHandlers.push(['previoustrack', () => this.emitter.emit(Event.RemotePrevious)]);
+            
+            if (options.capabilities.includes(this.CAPABILITY_SKIP_TO_NEXT))
+                actionHandlers.push(['nexttrack', () => this.emitter.emit(Event.RemoteNext)]);
+
+            for (const [action, handler] of actionHandlers) {
+                try { navigator.mediaSession.setActionHandler(action, handler); }
+                catch{ console.error(action + " is not supported yet"); }
+            }
+        }
     }
     setupProgressUpdates(interval) {
         // clear and reset interval
diff --git a/node_modules/react-native-track-player/lib/web/index.js b/node_modules/react-native-track-player/lib/web/index.js
index ad8108d..f4edd93 100644
--- a/node_modules/react-native-track-player/lib/web/index.js
+++ b/node_modules/react-native-track-player/lib/web/index.js
@@ -1,3 +1,3 @@
 import { TrackPlayerModule } from './TrackPlayerModule';
-const module = new TrackPlayerModule();
-export default module;
+
+export default new TrackPlayerModule();
